//stringify-developer-template module
const EventEmitter = require('events').EventEmitter;

const mqtt = require('mqtt');
const bonjour = require('bonjour')();
const settings = require('../../lib/settings'); 

const StringifyEventsModule = function (logger) {
    var self = this;
    var client; // mqtt subscriber
    if (!(this instanceof StringifyEventsModule)) return new StringifyEventsModule(logger);
    this.init = () => {
        logger.debug('stringify-developer-template module initialized');

        // browse for all http services 
        bonjour.find({ type: 'mqtt' }, function (service) {
        //logger.info('Found an MQTT broker:', service)
        logger.info('Found an MQTT broker address:', service.addresses[0])
        logger.info('Found an MQTT broker port:', service.port)
        logger.info('Found an MQTT broker txt:', service.txt)
        settings.saveSettings( "MQTTAddress", service.addresses[0] );
        settings.saveSettings( "MQTTPort", service.port );
        settings.saveSettings( "MQTTClient", service.txt['clientid'] );

        var mqttOptions = {
            clientId:service.txt['clientid']+'-uv' // MUST be unique
        };
    
        client  = mqtt.connect('mqtt://'+service.addresses[0]+':'+ service.port,  mqttOptions);
        //handle incoming messages
        client.on('message',function(topic, message, packet){
            logger.debug("message is "+ message);
            logger.debug("topic is "+ topic);
            if ( parseInt(message) > 8) { // 8<' Very High/Dangerous
              self.emit('trigger', {
                trigger : 'Warning'
              });
            }
        });

        client.on('error', function (err) {
            logger.debug('Error from '+'mqtt://'+service.addresses[0]+':'+ service.port);
            logger.debug(err);
        });

        client.on('connect', function () {
            logger.debug('Connected to '+'mqtt://'+service.addresses[0]+':'+ service.port);
            client.subscribe('ny-10001/uv-sensor', function (err) {
            if(err) logger.debug('MQTT Subscriber Error:',err);
            });
        });

  });

    };

    this.action = (message) => {

        //This message will be the same as the flowData packet in .flowAdd below with any parameters substituted in.
    };

    this.thingAdd = (thing) => {
        //Expect this event when this module is added to a Stringify library.
        logger.debug(`stringify-developer-template (thingAdd): Listening for events for ${thing.name}.`);


    };


    this.flowAdd = (flowData) => {
        logger.debug(`stringify-developer-template (flowAdd): Listening for events for a flow.`);
        console.log(flowData);
        //Expect this event when a flow containing this thing is enabled 
        
        //flowdata sample:
        // { id: unique identifier for this 'thing' in a flow
        //   flowId:  unique identifier for this flow
        //   trigger:    'triggerAFlowWhen' or 'triggerAFlowOnly If'        (for triggers)
        //   action:     'action'                                           (for actions)
        //   controls: {
        //          trigger:   (defined trigger for triggers)  (If you defined parameters, you may see 'codes' in this value representing the parameters you passed in)
        //          action:    (defined action for actions)
        //   }
        // }
        

    };

    this.thingDel = (thing) => {
        //Expect this event when this module is removed from your Stringify library
        logger.debug(`stringify-developer-template (thingDel): Removing listener for ${thing.name} as it was removed from your Stringify library.`);
    };

    this.flowDel = (flowData) => {
        //flowData packet the same as in the .flowAdd event
        logger.debug(`stringify-developer-template (flowDel): Removing listener for an instance of the stringify-developer-template in a flow.`);
        console.log(flowData);
    };


    //To trigger a flow, emit a JSON message containing the 'trigger' key and a value you defined in the Stringify app.
     
    // self.emit('trigger', {
    //     trigger: 'triggerMe'
    // });

    EventEmitter.call(this);
};

require('util').inherits(StringifyEventsModule, EventEmitter);

module.exports = StringifyEventsModule;